#Enter Python code here and hit the Run button.# ceiling of a number in asceinding sorted array
#approch 2
arr = [1,3,4,6,7,9,11,23,35,40]
target = 41
#apply binary search algorithm

def binary_search(arr, target):
    #define start and end  index 
    start = 0
    end = len(arr) - 1
    ceil = None
    
    while(start<=end):
        # print("inside while  function")
        
        #calculate mid index here at the start of the loop
        mid = start + (end-start)//2 
        # print(mid)
        
        if (arr[mid]<target):
            start = mid+1 
        elif (arr[mid]>target):
            end = mid-1
        else:
            #target element is eqaul to mid element (index)
            return arr[mid]
	'''
	above binary search code is not changed at all
	it is to be noted that answer if exists always has to lie between start and end index
	if condition of while loop is voilated then start is +1 greater than end 
	which is suitable condition: we need an element just great than target element. since target element was not found
	start can be a potential candidate

    if code reaches here it means target element was not found and start is just greater than end
	check if start index has surpased array or not#
	if yes then our array has no element that can be greater than or equal to target
	else return the number at start index
	'''
    if (start<len(arr)):
        return arr[start]
    else:
        return -1
    
index = binary_search(arr,target)
print(index)